# Git Prompt
source "/usr/share/git/completion/git-prompt.sh"

GIT_PS1_SHOWUPSTREAM="verbose"
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_DESCRIBE_STYLE="describe"

if ${use_color} ; then
   GIT_PS1_SHOWCOLORHINTS=1
fi

# Git
source /usr/share/bash-completion/completions/git
__git_complete g __git_main

function detect_color_support {
    # Return a variable containing true if color is supported.

    # This was copied from Manjaro's .bashrc

    # Set colorful PS1 only on colorful terminals.
    # dircolors --print-database uses its own built-in database
    # instead of using /etc/DIR_COLORS.  Try to use the external file
    # first to take advantage of user additions.  Use internal bash
    # globbing instead of external grep binary.
    local use_color=
    local safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
    local match_lhs=""
    [[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
    [[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
    [[ -z ${match_lhs}    ]] \
	    && type -P dircolors >/dev/null \
	    && match_lhs=$(dircolors --print-database)
    [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

    # added
    [[ "$TERM" =~ "color" ]] && use_color=true
    echo $use_color
    return 0
}

use_color=$(detect_color_support)

NC=`tput sgr0`
BOLD=`tput bold`
BLUE=`tput setaf 4`
GRAY_BACKGROUND=`tput setab 7`

# we mark with a different color if we are running from a
REMOTE_COLOR=
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    if [ "$use_color" == true ]; then
        REMOTE_COLOR="$GRAY_BACKGROUND"
    fi
fi

PROMPT_COMMAND=
if ${use_color} ; then
   GIT_PS1_SHOWCOLORHINTS=1
   PROMPT_COMMAND='__git_ps1 "$REMOTE_COLOR${debian_chroot:+($debian_chroot)}\[$BOLD\]\u@\h\[$NC\] \[$BLUE\]\w\[$NC\]" "\\$ "'
else
   PROMPT_COMMAND='__git_ps1 "$REMOTE_COLOR${debian_chroot:+($debian_chroot)}\u@\h \w" "\\$ "'
fi

PS1_TAIL='$(__git_ps1 " (%s)")\$ '

if ${use_color} ; then
    PS1='$REMOTE_COLOR${debian_chroot:+($debian_chroot)}\[$BOLD\]\u@\h\[$NC\]:\[$BLUE\]\w\[$NC\]'$PS1_TAIL
else
    PS1='$REMOTE_COLOR${debian_chroot:+($debian_chroot)}\u@\h:\w'$PS1_TAIL
fi

# From https://superuser.com/questions/509950/why-are-unicode-characters-not-rendering-correctly
LANG=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

function urxvt-keyboard-select {
    local C=$(tput setaf 6)
    local NC=$(tput sgr0)
    local B=$(tput bold)
    echo -e "\
${C}${B}h/j/k/l${NC}:    Move cursor left/down/up/right (also with arrow keys)
${C}${B}g/G/0/^/$/H/M/L/f/F/;/,/w/W/b/B/e/E${NC}: More vi-like cursor movement keys
${C}${B}'/'/?${NC}:      Start forward/backward search
${C}${B}n/N${NC}:        Repeat last search, N: in reverse direction
${C}${B}Ctrl-f/b${NC}:   Scroll down/up one screen
${C}${B}Ctrl-d/u${NC}:   Scroll down/up half a screen
${C}${B}v/V/Ctrl-v${NC}: Toggle normal/linewise/blockwise selection
${C}${B}y/Return${NC}:   Copy selection to primary buffer, Return: quit afterwards
${C}${B}Y${NC}:          Copy selected lines to primary buffer or cursor line and quit
${C}${B}q/Escape${NC}:   Quit keyboard selection mode"
}

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# From http://blog.effy.cz/2014/07/maven-build-notifications.html
notify-after () {
    CMD=$1
    shift

    $CMD $@
    RETCODE=$?
    BUILD_DIR=${PWD##*/}
    BUILD_CMD=`basename $CMD`
    if [ $RETCODE -eq 0 ]
    then
        notify-send -c $BUILD_CMD -i emblem-default -t 1000 "$BUILD_DIR: $BUILD_CMD successful" "$(date)"
    elif [ $RETCODE -eq 130 ]
    then
        notify-send -c $BUILD_CMD -i emblem-ohno -t 1000 "$BUILD_DIR: $BUILD_CMD canceled" "$(date)"
    else
        notify-send -c $BUILD_CMD -i emblem-important -t 1000 "$BUILD_DIR: $BUILD_CMD failed" "$(date)"
    fi
    return $RETCODE
}

# Java
export JAVA_HOME=/usr/lib/jvm/default
export NASHORN_HOME=$JAVA_HOME/bin
export M2_HOME=/usr/share/maven
export M2=$M2_HOME/bin
export MAVEN_OPTS="-Xmx2048m -Xms512m -XX:MaxPermSize=312M -XX:ReservedCodeCacheSize=128m -Dsun.lang.ClassLoader.allowArraySyntax=true -ea -Dfile.encoding=UTF-8"
export MAVEN_JMX="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=6969 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false"

# clojure
export CLOJURE_JAR=$HOME/.m2/repository/org/clojure/clojure/1.9.0/clojure-1.9.0.jar
export CLOJURE_EXT=$CLOJURE_JAR
export CLOJURE_OPTS="-Xms128M -Xmx512M -server"

# Emacs default editor
export ALTERNATE_EDITOR=""
export EDITOR="$HOME/bin/emacsclient-daemon.sh -nw"
export VISUAL="$HOME/bin/emacsclient-daemon.sh -c"
export EA_EDITOR="$HOME/bin/emacsclient-daemon.sh -c"

# Misc
export XMLLINT_INDENT="  "

# GPG
export GPGKEY=81052A48
export GPGKEYID=81052A48

# Private Stuff
. "$HOME/.bashrc_priv"

# Leiningen
export LEIN_JVM_OPTS=
# MOVED TO /etc/bash_completion.d
# source ~/bin/lein_completion.bash

# Boot
export BOOT_JVM_OPTIONS="-Xmx8g -client -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xverify:none -XX:-OmitStackTraceInFastThrow"
export BOOT_COLOR=1
export BOOT_GPG_COMMAND=gpg2

# Docker Remote API
# DOCKER_OPTS='-H tcp://localhost:4243 -H unix:///var/run/docker.sock'

# AWS completion
complete -C '/usr/bin/aws_completer' aws

export GIT_HOME="$HOME/git"

# Custom load config
export LD_LIBRARY_PATH="$HOME/.local/lib"

# Gtags & ctags
export GTAGSLABEL=universal-ctags

# Kubernetes
source <(kubectl completion bash)

# sdkman
export SDKMAN_DIR="/home/kapitan/.sdkman"
[[ -s "/home/kapitan/.sdkman/bin/sdkman-init.sh" ]] && source "/home/kapitan/.sdkman/bin/sdkman-init.sh"

# docker
function docker-network-containers {
    local network="$1"
    if output=$(docker network inspect $network); then
        echo "$output" | jq -r '.[0]?.Containers | map_values(.Name)[]'
    fi
}

function docker-network-purge {
    local network="$1"
    local containers=$(docker-network-containers $network | xargs)
    if [ -n "$containers" ]; then
       echo "Disconnecting $containers..."
       for i in $containers; do
           set -x
           docker network disconnect --force $network "$i"
           set +x
           sleep 0.5
       done
       docker network rm $network
    fi
}
