#!/bin/bash

set -uo pipefail

mount_point=${1:-}

if [ -z "$mount_point" ]; then
    error_code=66
    echo "Please pass the mount point as second parameter (error: $error_code)"
    exit $error_code
fi

vault_bkp_bin=$HOME/bin/vault-backup

answer_timeout=10
ANS="y"

# AR we check mount now, but the following is useful too
#
# sudo losetup -Jl /dev/loop0 | jq -rC '.loopdevices[] | select(.back-file | contains("$MOUNT_POINT"))'
if [[ "$(mount)" =~ /dev/mapper.*"$mount_point" ]]; then
    if read -p "Skip vault backup (y/n)? " -t $answer_timeout ans;
    then
        ans=${ans,,}
        if [[ "$ans" =~ y|Y ]] ; then
            echo "Ok, skipping vault backup..."
        else
           $vault_bkp_bin $mount_point
        fi
    else
        echo "No input received in $answer_timeout seconds, backing up..."
        $vault_bkp_bin $mount_point
    fi
fi

echo -e "Unmounting vault from $mount_point..."
sudo umount $mount_point

echo -e "Remove all executable flags..."
find $mount_point -type f \( -perm -u=x -o -perm -g=x -o -perm -o=x \) -exec sudo chmod -v -x {} ";"

if [ "$?" = "0" ]; then
    echo -e "Encrypting back again..."
    sudo cryptsetup luksClose vault

    if [ "$?" = "0" ]; then
        vault_losetup=$(sudo losetup -a | grep vault)
        vault_file=$(echo "$vault_losetup" | grep -o '(.*)' | cut -d \( -f 2 | cut -d \) -f 1)
        dev_loop=$(echo "$vault_losetup" | awk -F ':' '{ print($1) }')

        echo -e "Umounting $dev_loop..."
        sudo losetup -d $dev_loop

        if [ "$?" = "0" ]; then
            echo -e "Writing sha1..."

            pushd $(dirname $vault_file) > /dev/null
            sha1sum $(basename $vault_file) > $vault_file.sha1
            sha1sum -c $vault_file.sha1
            popd > /dev/null

            echo -e "Completed!"
        else
            echo -e "Error: losetup -d exited with $?"
        fi
    else
        echo -e "Error: cryptsetup exited with $?"
    fi
else
    echo -e "Error: umount exited with $?"
fi

exit $?
