#!/usr/bin/env bash
#
# /usr/local/bin/secret
#
# Performs backup of files, encrypting the file at destination.
# If the destination is a folder, the final file name will have a
# timestamp suffix.
#
# WARNING! If the copy to destination is successful, the original file
# is wiped.
#
# Usage:
# secret -b|--backup -s|src <file> -d|--dest <file_or_folder>
# or
# secret -r|--restore -s|--src <file> -d|--dest <file_or_folder>

set -euo pipefail

#
# Standard Options
#
ANSWER_TIMEOUT=60
STAMP=$(date "+%Y%m%d%H%M")
SHRED=$(which shred)
SHRED_OPTS='--force --iterations=9 --zero --remove'
OPENSSL=$(which openssl)
OPENSSL_CIPHER='-aes-256-cbc -pbkdf2

#
# Storage Options
# Only 1 set of options should be un-commented (the last one will be used).
#
# CP - Storage on a local machine. Could be Dropbox/Wuala folder.
CP=cp
#
# SSH - Storage on a remote machine.
#CP=scp
#
# S3 - Storage on Amazon's S3. Be sure s3cmd is installed and properly setup.
# You may need "s3cmd put --force" if you use a sub-directory.
#CP=s3cmd put

# Start
do_usage() {
    echo
    echo "Performs backup of files, encrypting the file at destination."
    echo "If the destination is a folder, the final file name will have a"
    echo "timestamp suffix."
    echo
    echo "WARNING! If the copy to destination is successful, the original file"
    echo "is wiped."
    echo
    echo "Usage:"
    echo "secret -b|--backup -s|src <file> -d|--dest <file_or_folder>"
    echo "or"
    echo "secret -r|--restore -s|--src <file> -d|--dest <file_or_folder>"
    exit 1
}

OPENSSL_OPTS=""
SRC_FILE=""
DEST_FILE=""
ACTION=""

set +e
TEMP=`getopt -o hbrs:d: --long help,restore,backup,src:,dest: -n 'secret' -- "$@"`
set -e
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -r|--restore) OPENSSL_OPTS="-d" ; ACTION="restore" ; shift ;; # directly mapping to openssl param
        -b|--backup) OPENSSL_OPTS="-e -salt" ; ACTION="backup" ; shift ;;
        -s|--src) SRC_FILE="$2" ; shift 2 ;;
        -d|--dest) DEST_FILE="$2" ; shift 2 ;;
        -h|--help) shift ; do_usage ; break ;;
        --) shift ; break ;;
        *) do_usage ; exit 1 ;;
    esac
done

do_error() {
  echo $1
  do_usage
}

[[ "$ACTION" != "backup" && "$ACTION" != "restore" ]] && do_usage
[ -z "$DEST_FILE" ] && do_error "Destination is missing."
[ ! -f "$SRC_FILE" ] && do_error "Source file not found."

NORMALIZED_DIR=""

if [ -d "$DEST_FILE" ] ; then
    NORMALIZED_DIR=$(readlink -e "$DEST_FILE")
    DEST_FILE=$NORMALIZED_DIR/$(basename $SRC_FILE)
fi

do_shred() {
  $SHRED $SHRED_OPTS "$1" && sync
}

[ "$SRC_FILE" = "$DEST_FILE" ] && do_error "Source and Destination are the same file."

ANS=n
if [ -f "$DEST_FILE" ] ; then
    echo -n "Destination exists. Overwriting will shred the old file and write the new one at location. Proceed (y/n)? "
    read -t $ANSWER_TIMEOUT ANS
    ANS=${ANS,,}
    if [ $ANS == 'y' ] ; then
      do_shred $DEST_FILE
    else
      exit 0
    fi
fi

do_clean() {
  do_shred $SRC_FILE
  do_shred $TMP_FILE
}

do_fail_clean_temp() {
  do_shred $TMP_FILE
  echo failed!
  exit 1
}

do_fail() {
  echo failed!
  exit 1
}

TMP_FILE=/tmp/bkp$STAMP

if [ "$ACTION" == "backup" ]; then
    echo "Encrypting backup..."
elif [ "$ACTION" == "restore" ]; then
    echo "Decrypting backup..."
fi

$OPENSSL enc $OPENSSL_OPTS $OPENSSL_CIPHER -in "$SRC_FILE" -out "$TMP_FILE"

[ 0 -ne $? ] && do_fail_clean_temp
echo done.

$CP "$TMP_FILE" "$DEST_FILE"
[ 0 -ne $? ] && do_fail_clean_temp

if [ $ACTION == "backup" ]; then
    echo "Shredding the source and temp file..."
    do_clean
    echo done.
fi
